Did someone say secrets, this project sure has quite a few of them.  Kubernetes allows for the usage of Client Secrets,
that are encrypted in Base 64 to be mounted to the containers.  Secrets can be anything from a service account, java version,
or general client credentials.  There are several senstitive information points in this code that could become client secrets.
A quick scan of the project I found potential in the django-deploy.yaml, settings.py, and db-deployment.yaml.

The db-deployment.yaml. and django-deploy.yaml contained the env variable MYSQL_ROOT_PASSWORD mounted as a name/value pair.
Instead of using the plaintext value provided I created a secrets.yml file that creates a secret call MYSQL_ROOT, set 
to the thisisatestthing. value as a base 64 encoded string.  I then referenced the secret in the yaml files as the following:

            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: client-secret
                  key: MYSQL_ROOT

Similar to assignment 2, the settings.py file still contains a secret key, thus like in assignment 2 I will make this into an env variable. 
Except this time I will store the environment variable as a secret in the secrets yaml file under the name SECRET_KEY.  Using the os environment
command to retrieve the base64 encoded secret from the secret.yml 

django deploy yaml update:

            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: client-secret
                  key: SECRET_KEY

setting.py update:
SECRET_KEY = os.environ.get("SECRET_KEY")

Now that I have updated all of the yaml files with the updated secret information, I will need to mount/create the secrets to the POD/Containers.
To do this I will run the following commands:
1. Initalized the Secrets, kubectl apply -f part1/secrets.yaml
2. Rebuilt the Docker Containers, docker build -t nyuappsec/assign3:v0 .
3. Recreated the Pods using the Commands Provided in Part 0:
    kubectl apply -f db/k8
    kubectl apply -f GiftcardSite/k8
    kubectl apply -f proxy/k8
4. Verified the containers are running
assignment3-django-deploy-5b95f58fcb-xcgq6   1/1     Running       0          29s
assignment3-django-deploy-5db4f954dc-2nssz   1/1     Terminating   0          17h
5. minikube service proxy-service

I then verified the project still runs the webpage.

Things I did not change:
The django-admin-pass-secret.yaml, already has the proper storage mechanism for using secrets.